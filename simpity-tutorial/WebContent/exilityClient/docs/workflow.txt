Copyright (c) 2015 EXILANT Technologies Private Limited

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

Workflow is a modeling technique to represent how a document(entity) transitions through a set of states before reaching one of the end states.

FEATURES:
Initial design allows definition of a simple (straight) workflow modeling with following features.
1. Workflow is associated with a document. (A document CAN be associated with more than one workflows though)
2. Workflow for a document starts only after it is created. Creation of the document is considered to  be outside the scope of workflow.
3. Workflow starts with the state "initiated". This state name is reserved for this, and can not be used to name any other state. However, the description for this state can be defined for each workflow.
4. Workflow has finite states that the document flows through.
5. Workflow defines a finite number of "actors". Actual user who plays these actor-roles are to be determined at run time based on certain facilities provided for that purpose(This aspect is not designed yet)
6. At every state, except the end-states, a finite number of actions can be taken by an actor. Such an action puts the document to another state. (It is possible that the new state is the same)
7. Current state + actor + action is to be unique. This is named as a step. A step is defined by a unique combination of currentState, actor and action. Document will (possibly) move to another state.\
8. No "branch-merge" kind of features are available as of now. We will extend the design suitably to accomodate actual features required by projects.
 
DESIGN:
1. Workflow is designed as an Exility Component. That is, Workflow is a class that defines all attributes of a workflow, so that a given workflow can be expressed as an XML which the Resource/Object Managers can load as an object instance at run time. We have extended this facility to allow xl sheet instead of XML.
2. Service class has been re-factored. ServiceInterface is introduced. Existing class "Service" is one implementation of this interface, while Workflow is another one.
3. Clients can use a workflow just as if it is a service. However, all workflow names have to be prefixed with "workflow.". For example a serverAction can say serviceId="workflow.order.createPo".
4. Services class understands this naming convention. if serviceName starts with "workflow.", it uses the rest of the service name as name of the workflow, and loads the workflow.
5. With the above arrangement, workflow can be used just like a service everywhere, including in a serviceStep.
6. With the above re-factoring, some signatures have changed. WE MUST CHECK WITH USER CODES WRITTEN BY PROJECTS BEFORER RELEASING THIS VERSION.
7. CustomLogic interface is introduced for designers to organize all custom code related to a workflow into a single class.

IMPLEMENTATION:
1. com.exilant.exility.core.wf package has all classes related to workflow.
2. workflow.java is the main class. Unlike other Exility Component classes, Workflow uses an inner class called WorkflowLogic to retain Workflow as an immutable class, and yet have instance attributes that simplify sharing of work across different methods in a thread-safe way.
3. required tables are defined in table.xml formats. Actual tables are created in a PostgreSQL rdbms.
4. only initial code is written. No unit test abilities are built.

PENDING DESIGN/IMPLEMENTATIONS:
1. notifications are not designed. Stubs are created for creation and deletion of notifications. It is suggested that we use Message class for the same. We have to integrate this with the universal in-box of any application. We may have to design it for Email being sent in HTML format with ability to take actions from there itself.
2. remarks associated with each action is not fully handled.
3. We should evaluate keeping all workflows in a read-only table, while keeping only the active ones in a transaction-friendly table.
4. WorkflowStep has few stubs.
